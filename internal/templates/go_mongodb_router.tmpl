package router

import (
{{if hasAuthentication}}
	"{{.App.Repository}}/internal/auth"
{{end}}
	"{{.App.Repository}}/internal/health"
{{range .App.Entities}}
{{if hasController .}}
	"{{$.App.Repository}}/internal/{{.Name}}"
{{end}}
{{end}}
    "github.com/gofiber/fiber/v2"
	"go.mongodb.org/mongo-driver/mongo"
)

func Router(app *fiber.App, client *mongo.Client) {
	hc := health.NewController()
{{range .App.Entities}}
{{if hasController .}}
{{if (eq .Name $.App.Authentication.Entity)}}
	{{.Name}}Service := {{.Name}}.NewService(
		{{.Name}}.NewRepository(
			client,
		),
	)
{{end}}

{{$controller := camelize .Name "controller"}}
    {{$controller}} := {{.Name}}.NewController(
{{if (eq .Name $.App.Authentication.Entity)}}
		{{.Name}}Service,
{{else}}
		{{.Name}}.NewService(
			{{.Name}}.NewRepository(
				client,
			),
		),
{{end}}
	)
{{end}}
{{end}}
	app.Get("/health", hc.Get)
	v1 := app.Group("/v1")
{{range .App.Entities}}
{{if hasController .}}
{{$group := camelize .Name "grp"}}{{$controller := camelize .Name "controller"}}
    {{$group}} := v1.Group("/{{pluralize .Name}}")
{{$isAuthenticatedEntity := .IsAuthenticated}}
{{if $isAuthenticatedEntity}}
	{{$group}}.Use(auth.Handler)
{{end}}
{{range .Actions}}
{{if eq .Type "create"}}
{{if (and .Authenticated (not $isAuthenticatedEntity))}}
	{{$group}}.Post("/", auth.Handler, {{$controller}}.Create)
{{else}}
    {{$group}}.Post("/", {{$controller}}.Create)
{{end}}
{{end}}
{{if eq .Type "getOne"}}
{{if (and .Authenticated (not $isAuthenticatedEntity))}}
	{{$group}}.Get("/:id", auth.Handler, {{$controller}}.GetOne)
{{else}}
    {{$group}}.Get("/:id", {{$controller}}.GetOne)
{{end}}
{{end}}
{{if eq .Type "getAll"}}
{{if (and .Authenticated (not $isAuthenticatedEntity))}}
	{{$group}}.Get("/", auth.Handler, {{$controller}}.GetAll)
{{else}}
    {{$group}}.Get("/", {{$controller}}.GetAll)
{{end}}
{{end}}
{{if eq .Type "update"}}
{{if (and .Authenticated (not $isAuthenticatedEntity))}}
	{{$group}}.Put("/:id", auth.Handler, {{$controller}}.Update)
    {{$group}}.Patch("/:id", auth.Handler, {{$controller}}.Update)
{{else}}
	{{$group}}.Put("/:id", {{$controller}}.Update)
    {{$group}}.Patch("/:id", {{$controller}}.Update)
{{end}}
{{end}}
{{if eq .Type "delete"}}
{{if (and .Authenticated (not $isAuthenticatedEntity))}}
	{{$group}}.Delete("/:id", auth.Handler, {{$controller}}.Delete)
{{else}}
    {{$group}}.Delete("/:id", {{$controller}}.Delete)
{{end}}
{{end}}
{{end}}
{{end}}
{{end}}

{{if hasAuthentication}}
	authService := auth.NewController(
		{{.App.Authentication.Entity}}Service,
	)

	authGrp := v1.Group("/auth")
	authGrp.Post("/signin", authService.SignIn)
	authGrp.Post("/signout", authService.SignOut)
	authGrp.Get("/me", authService.Me)
{{end}}
}
