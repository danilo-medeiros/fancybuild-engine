package main

import (
	"bytes"
	"context"
{{if .HasAuthentication}}
	"encoding/json"
	"io"
{{end}}
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"testing"

	"github.com/danilo-medeiros/todoapp/internal/database"
	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
	"github.com/stretchr/testify/assert"
)

type testCase struct {
	Description   string
	Method        string
	Route         string
	Authenticated bool
	RequestBody   []byte
	ExpectedError bool
	ExpectedCode  int
	ExpectedBody  string
}

type teardownTests func()

var token string

func TestMain(m *testing.M) {
	err := godotenv.Load(".env.test")

	if err != nil {
		panic(err)
	}

	os.Exit(m.Run())
}

func TestHealthRoute(t *testing.T) {
	app, teardown := setupTests()
	defer teardown()

	tests := []*testCase{
		{
			Description:   "health",
			Route:         "/health",
			ExpectedError: false,
			ExpectedCode:  200,
			Method:        "GET",
		},
		{
			Description:   "non existing route",
			Route:         "/i-dont-exist",
			ExpectedError: false,
			ExpectedCode:  404,
			ExpectedBody:  "Cannot GET /i-dont-exist",
			Method:        "GET",
		},
	}

	runTestCases(app, t, tests)
}

{{if .HasAuthentication}}
func TestAuthSignInRoute(t *testing.T) {
	route := "/v1/auth/signin"
	method := "POST"
	app, terminate := setup()
	defer terminate()

	invalidUser, err := json.Marshal(map[string]string{
		"email":    "invalid.user@example.com",
		"password": "12345678",
	})

	assert.Equalf(t, nil, err, "parsing body")

	invalidBody, err := json.Marshal(map[string]string{
		"email":    "...",
		"password": "...",
	})

	assert.Equalf(t, nil, err, "parsing body")

	validUser, err := json.Marshal(map[string]string{
		"email":    "valid.user@example.com",
		"password": "87654321",
	})

	assert.Equalf(t, nil, err, "parsing body")

	validUserWithWrongPassword, err := json.Marshal(map[string]string{
		"email":    "valid.user@example.com",
		"password": "wrongpass",
	})

	assert.Equalf(t, nil, err, "parsing body")

	tests := []*testCase{
		{
			Description:   "invalid body",
			Route:         route,
			ExpectedError: false,
			ExpectedCode:  406,
			Method:        method,
			RequestBody:   invalidBody,
		},
		{
			Description:   "invalid user",
			Route:         route,
			ExpectedError: false,
			ExpectedCode:  401,
			Method:        method,
			RequestBody:   invalidUser,
		},
		{
			Description:   "wrong password",
			Route:         route,
			ExpectedError: false,
			ExpectedCode:  401,
			Method:        method,
			RequestBody:   validUserWithWrongPassword,
		},
		{
			Description:   "valid user",
			Route:         route,
			ExpectedError: false,
			ExpectedCode:  200,
			Method:        method,
			RequestBody:   validUser,
		},
	}

	runTestCases(app, t, tests)
}

func createUser(app *fiber.App) {
	validUser, err := json.Marshal(map[string]string{
		"name":     "Valid User",
		"email":    "valid.user@example.com",
		"password": "87654321",
	})

	panicIfError(err)

	req, err := http.NewRequest(
		"POST",
		"/v1/users",
		bytes.NewBuffer([]byte(validUser)),
	)

	req.Header = http.Header{
		"Content-Type": []string{"application/json"},
	}

	panicIfError(err)
	res, _ := app.Test(req, -1)

	if res.StatusCode != 200 {
		err = fmt.Errorf(res.Status)
	}

	panicIfError(err)

	respBody, err := io.ReadAll(res.Body)
	panicIfError(err)

	var response struct {
		AuthToken string `json:"authToken"`
	}

	err = json.Unmarshal(respBody, &response)
	panicIfError(err)
}

func getValidToken(app *fiber.App) {
	validUser, err := json.Marshal(map[string]string{
		"email":    "valid.user@example.com",
		"password": "87654321",
	})

	panicIfError(err)

	req, err := http.NewRequest(
		"POST",
		"/v1/auth/signin",
		bytes.NewBuffer([]byte(validUser)),
	)

	req.Header = http.Header{
		"Content-Type": []string{"application/json"},
	}

	panicIfError(err)

	res, err := app.Test(req, -1)
	panicIfError(err)

	respBody, err := io.ReadAll(res.Body)
	panicIfError(err)

	var response struct {
		AuthToken string `json:"authToken"`
	}

	err = json.Unmarshal(respBody, &response)
	panicIfError(err)

	token = response.AuthToken
}
{{end}}

func runTestCases(app *fiber.App, t *testing.T, tests []*testCase) {
	for _, test := range tests {
		req, _ := http.NewRequest(
			test.Method,
			test.Route,
			bytes.NewBuffer([]byte(test.RequestBody)),
		)

		req.Header = http.Header{
			"Content-Type": []string{"application/json"},
		}

		if test.Authenticated {
			req.Header["Authorization"] = []string{fmt.Sprintf("Bearer %s", token)}
		}

		res, err := app.Test(req, -1)
		assert.Equalf(t, test.ExpectedError, err != nil, test.Description)

		if test.ExpectedError {
			continue
		}

		assert.Equalf(t, test.ExpectedCode, res.StatusCode, test.Description)

		if len(test.ExpectedBody) > 0 {
			body, err := ioutil.ReadAll(res.Body)
			assert.Nilf(t, err, test.Description)
			assert.Equalf(t, test.ExpectedBody, string(body), test.Description)
		}
	}
}

func setupTests() (*fiber.App, teardownTests) {
	ctx, client := database.Connect()
	err := client.Database(os.Getenv("DB_NAME")).Drop(context.Background())

	if err != nil {
		panic(err)
	}

	defer func() {
		database.Disconnect(ctx, client)
	}()

	app, terminate := setup()

	createUser(app)
	getValidToken(app)

	return app, func() {
		terminate()
	}
}

func panicIfError(err error) {
	if err != nil {
		panic(err)
	}
}
