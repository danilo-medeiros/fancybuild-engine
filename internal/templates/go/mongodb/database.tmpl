package database

import (
	"context"
	"time"

{{if .HasIndexes}}
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
{{end}}
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type Database interface {
	Connect() *mongo.Client
	Disconnect()
}

type database struct {
	Name   string
	URL    string
	Ctx    context.Context
	Client *mongo.Client
}

{{if .HasIndexes}}
func getRef(val bool) *bool {
	return &val
}
{{end}}

func (d *database) createIndexes() error {
	// Define here the indexes of your database
{{if .HasIndexes}}
{{range .App.Entities}}
{{if .HasIndexes}}
	_, err := d.Client.Database(d.Name).Collection("{{pluralize .Name}}").Indexes().CreateMany(
		d.Ctx,
{{range .Indexes}}
		[]mongo.IndexModel{
			{
				Keys: bson.D{
{{range .Fields}}
					primitive.E{Key: "{{.Name}}", Value: {{mapSort .Sort}}},
{{end}}
				},
				Options: &options.IndexOptions{
					Unique: getRef({{.Unique}}),
				},
			},
		},
{{end}}
	)
{{end}}
{{end}}

	return err
{{else}}
	return nil
{{end}}
}

func (d *database) Connect() *mongo.Client {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	client, err := mongo.Connect(ctx, options.Client().ApplyURI(d.URL))

	defer cancel()

	if err != nil {
		panic(err)
	}

	d.Ctx = ctx
	d.Client = client

	err = d.createIndexes()

	if err != nil {
		panic(err)
	}

	return client
}

func (d *database) Disconnect() {
	if err := d.Client.Disconnect(d.Ctx); err != nil {
		panic(err)
	}
}

func New(url string, name string) Database {
	return &database{
		URL:  url,
		Name: name,
	}
}
