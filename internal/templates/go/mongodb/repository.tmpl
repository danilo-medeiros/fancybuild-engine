package {{.Entity.Name}}

import (
	"context"
	"fmt"
	"os"

	"{{.Definitions.App.Repository}}/pkg/entities"
{{if or (.Entity.HasAction "create") (.Entity.HasAction "update") }}
	"github.com/gofiber/fiber/v2"
{{end}}
{{if or (.Entity.HasAction "delete") (.Entity.HasAction "update") (.Entity.HasAction "getAll")}}
	"go.mongodb.org/mongo-driver/bson"
{{end}}
	"go.mongodb.org/mongo-driver/mongo"

{{range .Entity.Actions}}{{if eq .Type "getAll"}}
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/bson/primitive"
{{end}}{{end}}
)

type Repository interface {
{{range .Entity.Actions}}
{{if eq .Type "create"}}
	Create(*entities.{{capitalize $.Entity.Name}}) (*entities.{{capitalize $.Entity.Name}}, error)
{{end}}
{{if eq .Type "getAll"}}
	GetAll(*GetAllParams) ([]*entities.{{capitalize $.Entity.Name}}, error)

	Count(*GetAllParams) (int64, error)
{{end}}
{{if eq .Type "update"}}
	Update(*entities.{{capitalize $.Entity.Name}}) (*entities.{{capitalize $.Entity.Name}}, error)
{{end}}
{{if eq .Type "delete"}}
	Delete(*entities.{{capitalize $.Entity.Name}}) (bool, error)
{{end}}
{{end}}
{{if or ($.Entity.HasAction "getOne") ($.Entity.HasAction "update")}}
	GetOne(*GetOneParams) (*entities.{{capitalize $.Entity.Name}}, error)
{{end}}
}

type repository struct {
	client     *mongo.Client
	database   string
	collection string
}

{{range .Entity.Actions}}
{{if eq .Type "create"}}
// Create - Create one {{$.Entity.Name}}
func (s *repository) Create({{$.Entity.Name}} *entities.{{capitalize $.Entity.Name}}) (*entities.{{capitalize $.Entity.Name}}, error) {
	_, err := s.client.
		Database(s.database).
		Collection(s.collection).
		InsertOne(context.TODO(), {{$.Entity.Name}})

	if mongoErr, ok := err.(mongo.WriteException); ok {
		if mongoErr.HasErrorCode(11000) {
			return nil, fiber.NewError(409, mongoErr.Error())
		}
	}

	if err != nil {
		return nil, fmt.Errorf("error while creating {{pluralize $.Entity.Name}}: %w", err)
	}

	return {{$.Entity.Name}}, nil
}
{{end}}

{{if eq .Type "getAll"}}
// GetAll - Gets all the {{pluralize $.Entity.Name}} given a set of parameters
func (s *repository) GetAll(params *GetAllParams) ([]*entities.{{capitalize $.Entity.Name}}, error) {
	var result []*entities.{{capitalize $.Entity.Name}}

	skip := params.Page * params.Limit

	sortOrder := 1

	if params.Order == "desc" {
		sortOrder = -1
	}

	cursor, err := s.client.
		Database(s.database).
		Collection(s.collection).
		Find(context.TODO(), params, &options.FindOptions{Limit: &params.Limit, Skip: &skip, Sort: bson.D{
			primitive.E{
				Key:   params.SortBy,
				Value: sortOrder,
			},
		}})

	if err != nil {
		return nil, fmt.Errorf("error while fetching {{pluralize $.Entity.Name}}: %w", err)
	}

	err = cursor.All(context.TODO(), &result)

	if err != nil {
		return nil, fmt.Errorf("error while parsing {{pluralize $.Entity.Name}}: %w", err)
	}

	if result == nil {
		return make([]*entities.{{capitalize $.Entity.Name}}, 0), nil
	}

	return result, nil
}

// Count - Counts all the {{pluralize $.Entity.Name}} that match the parameters
func (s *repository) Count(params *GetAllParams) (int64, error) {
	params.Pagination.Count = 0
	count, err := s.client.
		Database(s.database).
		Collection(s.collection).
		CountDocuments(context.TODO(), params)

	if err != nil {
		return 0, fmt.Errorf("error while counting {{pluralize $.Entity.Name}}: %w", err)
	}

	return count, nil
}
{{end}}
{{if eq .Type "update"}}
// Update - Update one {{$.Entity.Name}}
func (s *repository) Update({{$.Entity.Name}} *entities.{{capitalize $.Entity.Name}}) (*entities.{{capitalize $.Entity.Name}}, error) {
	_, err := s.client.
		Database(s.database).
		Collection(s.collection).
		UpdateOne(context.TODO(), bson.M{"id": {{$.Entity.Name}}.ID}, {{$.Entity.Name}})

	if mongoErr, ok := err.(mongo.WriteException); ok {
		if mongoErr.HasErrorCode(11000) {
			return nil, fiber.NewError(409, mongoErr.Error())
		}
	}

	if err != nil {
		return nil, fmt.Errorf("error while updating {{pluralize $.Entity.Name}}: %w", err)
	}

	return {{$.Entity.Name}}, nil
}
{{end}}
{{if eq .Type "delete"}}
// Delete - Deletes one {{$.Entity.Name}}
func (s *repository) Delete({{$.Entity.Name}} *entities.{{capitalize $.Entity.Name}}) (bool, error) {
	_, err := s.client.
		Database(s.database).
		Collection(s.collection).
		DeleteOne(context.TODO(), bson.M{"id": {{$.Entity.Name}}.ID})

	if err != nil {
		return false, fmt.Errorf("error while deleting {{pluralize $.Entity.Name}}: %w", err)
	}

	return true, nil
}
{{end}}
{{end}}

{{if or ($.Entity.HasAction "getOne") ($.Entity.HasAction "update")}}
// GetOne - Get one {{$.Entity.Name}} by parameters
func (s *repository) GetOne(params *GetOneParams) (*entities.{{capitalize $.Entity.Name}}, error) {
	var result []*entities.{{capitalize $.Entity.Name}}

	cursor, err := s.client.
		Database(s.database).
		Collection(s.collection).
		Find(context.TODO(), params)

	if err != nil {
		panic(err)
	}

	err = cursor.All(context.TODO(), &result)

	if err != nil {
		return nil, fmt.Errorf("while parsing {{$.Entity.Name}}: %w", err)
	}

	if len(result) == 0 {
		return nil, nil
	}

	return result[0], nil
}
{{end}}

func NewRepository(c *mongo.Client) Repository {
	return &repository{
		client:     c,
		database:   os.Getenv("DB_NAME"),
		collection: "{{pluralize .Entity.Name}}",
	}
}
