package utils

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"testing"

	"github.com/danilo-medeiros/todoapp/pkg/app"
	"github.com/danilo-medeiros/todoapp/pkg/database"
	"github.com/gofiber/fiber/v2"
	"github.com/stretchr/testify/assert"
	"gorm.io/gorm"
)

type TestCase struct {
	Description   string
	Method        string
	Route         string
	Authenticated bool
	RequestBody   []byte
	ExpectedError bool
	ExpectedCode  int
	ExpectedBody  string
	Headers       map[string]string
}

type TeardownTests func()

{{if .HasAuthentication}}
var Token string

func CreateUser(app *fiber.App) {
	validUser, err := json.Marshal(map[string]string{
		"name":     "Valid User",
		"email":    "valid.user@example.com",
		"password": "87654321",
	})
	PanicIfError(err)

	req, err := http.NewRequest(
		"POST",
		"/v1/users",
		bytes.NewBuffer([]byte(validUser)),
	)

	req.Header = http.Header{
		"Content-Type": []string{"application/json"},
	}

	PanicIfError(err)
	res, _ := app.Test(req, -1)

	if res.StatusCode != 200 {
		err = fmt.Errorf(res.Status)
	}

	PanicIfError(err)
	respBody, err := io.ReadAll(res.Body)
	PanicIfError(err)

	var response struct {
		AuthToken string `json:"authToken"`
	}

	err = json.Unmarshal(respBody, &response)
	PanicIfError(err)
}

func GetValidToken(app *fiber.App) {
	validUser, err := json.Marshal(map[string]string{
		"email":    "valid.user@example.com",
		"password": "87654321",
	})
	PanicIfError(err)

	req, err := http.NewRequest(
		"POST",
		"/v1/auth/signin",
		bytes.NewBuffer([]byte(validUser)),
	)

	req.Header = http.Header{
		"Content-Type": []string{"application/json"},
	}

	PanicIfError(err)
	res, err := app.Test(req, -1)
	PanicIfError(err)
	respBody, err := io.ReadAll(res.Body)
	PanicIfError(err)

	var response struct {
		AuthToken string `json:"authToken"`
	}

	err = json.Unmarshal(respBody, &response)
	PanicIfError(err)
	Token = response.AuthToken
}
{{end}}

func RunTestCases(app *fiber.App, t *testing.T, tests []*TestCase) {
	for _, test := range tests {
		t.Run(test.Description, func(t *testing.T) {
			req, _ := http.NewRequest(
				test.Method,
				test.Route,
				bytes.NewBuffer([]byte(test.RequestBody)),
			)

			req.Header = http.Header{
				"Content-Type": []string{"application/json"},
			}

			if test.Authenticated {
				req.Header["Authorization"] = []string{fmt.Sprintf("Bearer %s", Token)}
			}

			for header, value := range test.Headers {
				req.Header[header] = []string{value}
			}

			res, err := app.Test(req, -1)
			assert.Equalf(t, test.ExpectedError, err != nil, test.Description)

			if test.ExpectedError {
				return
			}

			assert.Equalf(t, test.ExpectedCode, res.StatusCode, test.Description)

			if len(test.ExpectedBody) > 0 {
				body, err := ioutil.ReadAll(res.Body)
				assert.Nilf(t, err, test.Description)
				assert.Equalf(t, test.ExpectedBody, string(body), test.Description)
			}
		})
	}
}

func dropDatabase(client *gorm.DB) {
	var tx *gorm.DB
{{range .App.Entities}}
	tx = client.Exec("DELETE FROM {{pluralize .Name}}")
	PanicIfError(tx.Error)
{{end}}
}

func SetupData(testName string) TeardownTests {
	db := database.New(os.Getenv("DB_URL"), os.Getenv("DB_NAME"))
	client := db.Connect()
	dropDatabase(client)
	app, terminate := app.Setup()
{{if .HasAuthentication}}
	CreateUser(app)
{{end}}

	return func() {
		terminate()
		dropDatabase(client)
		db.Disconnect()
	}
}

func SetupTests() (*fiber.App, TeardownTests) {
	app, terminate := app.Setup()
{{if .HasAuthentication}}
	GetValidToken(app)
{{end}}

	return app, func() {
		terminate()
	}
}

func PanicIfError(err error) {
	if err != nil {
		panic(err)
	}
}
