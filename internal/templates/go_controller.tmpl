package {{.Entity.Name}}

import (
	"{{.Repository.Domain}}/{{.Repository.Username}}/{{.Repository.Name}}/internal/entities"
	"{{.Repository.Domain}}/{{.Repository.Username}}/{{.Repository.Name}}/internal/validator"
	"github.com/gofiber/fiber/v2"
)

type Controller interface {
{{if .Entity.GetAll.Enabled}}
	GetAll(*fiber.Ctx) error
{{end}}
{{if .Entity.GetOne.Enabled}}
	GetOne(*fiber.Ctx) error
{{end}}
{{if .Entity.Create.Enabled}}
	Create(*fiber.Ctx) error
{{end}}
{{if .Entity.Update.Enabled}}
	Update(*fiber.Ctx) error
{{end}}
{{if .Entity.Delete.Enabled}}
	Delete(*fiber.Ctx) error
{{end}}
}

type controller struct {
	service Service
}

{{if .Entity.GetAll.Enabled}}
// GetAll - Gets all the {{pluralize .Entity.Name}} given a set of parameters
func (c *controller) GetAll(ctx *fiber.Ctx) error {
	var params GetAllParams
	err := ctx.QueryParser(&params)

	if err != nil {
		return err
	}

{{if .Entity.GetAll.Authenticated}}
	params.UserID = ctx.Locals("userID").(string)

{{end}}
	result, err := c.service.GetAll(&params)

	if err != nil {
		return err
	}

	return ctx.JSON(&result)
}

{{end}}
{{if .Entity.GetOne.Enabled}}
// GetOne - Get one {{.Entity.Name}} by parameters
func (c *controller) GetOne(ctx *fiber.Ctx) error {
	params := GetOneParam{
		ID: ctx.Params("id"),
{{if .Entity.GetOne.Authenticated}}
        UserID: ctx.Locals("userID").(string),
{{end}}
	}

	result, err := c.service.GetOne(&params)

	if err != nil {
		return err
	}

	if result == nil {
		return fiber.ErrNotFound
	}

	return ctx.JSON(&entities.SingleResult{
		Data: result,
	})
}

{{end}}
{{if .Entity.Create.Enabled}}
// Create - Create one {{.Entity.Name}}
func (c *controller) Create(ctx *fiber.Ctx) error {
	{{.Entity.Name}} := entities.{{initMethod .Entity}}()
	err := ctx.BodyParser(&{{.Entity.Name}})

	if err != nil {
		return err
	}
{{if .Entity.Create.Authenticated}}
	project.UserID = ctx.Locals("userID").(string)

{{end}}
	err = validator.Validate(&{{.Entity.Name}})

	if err != nil {
		return err
	}

	result, err := c.service.Create(&{{.Entity.Name}})

	if err != nil {
		return err
	}

	return ctx.JSON(&entities.SingleResult{
		Data: result,
	})
}

{{end}}
{{if .Entity.Update.Enabled}}
// Update - Update one project
func (c *controller) Update(ctx *fiber.Ctx) error {
	{{.Entity.Name}} := entities.{{initMethod .Entity}}()
	err := ctx.BodyParser(&{{.Entity.Name}})

	if err != nil {
		return err
	}
{{if .Entity.Create.Authenticated}}
	project.UserID = ctx.Locals("userID").(string)

{{end}}
	err = validator.Validate(&{{.Entity.Name}})

	if err != nil {
		return err
	}

	result, err := c.service.Update(&{{.Entity.Name}})

	if err != nil {
		return err
	}

	return ctx.JSON(&entities.SingleResult{
		Data: result,
	})
}

{{end}}
{{if .Entity.HardDelete.Enabled}}
// Delete - Hard delete one {{.Entity.Name}}
func (c *controller) Delete(ctx *fiber.Ctx) error {
	params := GetOneParam{
		ID: ctx.Params("id"),
	}

	{{.Entity.Name}}, err := c.service.GetOne(&params)

	if err != nil {
		return err
	}

	if {{.Entity.Name}} == nil {
		return fiber.ErrNotFound
	}

	result, err := c.service.Delete({{.Entity.Name}})

	if err != nil {
		return err
	}

	if result {
		return ctx.JSON(&entities.SingleResult{Message: "{{.Entity.Name}} deleted successfully"})
	}

	return &fiber.Error{
		Code:    fiber.StatusNotModified,
		Message: "{{.Entity.Name}} not deleted",
	}
}

{{end}}
func NewController(s Service) Controller {
	return &controller{s}
}
