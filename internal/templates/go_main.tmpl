package main

import (
	"fmt"
	"log"
	"os"

	"{{.App.Repository}}/internal/database"
	"{{.App.Repository}}/internal/errors"
	"{{.App.Repository}}/internal/router"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/joho/godotenv"
)

type Terminate func()

func setup() (*fiber.App, Terminate) {
	ctx, client := database.Connect()
	log.Println("successfully connected to database")

	app := fiber.New(fiber.Config{
		ErrorHandler:          errors.Handler,
		DisableStartupMessage: true,
		AppName:               "{{.App.Name}}",
	})

	app.Use(recover.New(recover.Config{EnableStackTrace: true}))
	app.Use(logger.New())

	router.Router(app, client)

	return app, func() {
		database.Disconnect(ctx, client)
	}
}

func main() {
	err := godotenv.Load()

	if err != nil {
		panic(err)
	}

	app, terminate := setup()
	defer terminate()

	log.Default().Printf("listening on port %s\n", os.Getenv("PORT"))
	err = app.Listen(fmt.Sprintf("%s:%s", os.Getenv("HOST"), os.Getenv("PORT")))

	if err != nil {
		panic(err)
	}
}
